{"version":3,"file":"static/js/787.651ece9b.chunk.js","mappings":"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","sources":["components/common/Paging.js","components/tag/styles/TagStyle.js","components/tag/Tag.js","components/community/Thead.js","components/community/List.js","pages/community/ListPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ColorStyle } from \"../../styles/common/CommonStyle\";\r\nimport { PagingBoxStyle, PagingNumStyle } from \"../community/styles/ListStyle\";\r\nimport useCustomMove from \"../../hooks/useCustomMove\";\r\n\r\nconst Paging = ({ totalItems, itemPerPage }) => {\r\n  const { moveToList, page } = useCustomMove();\r\n\r\n  // 전체 페이지 수 계산\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  // 현재 페이지\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // 표시할 페이지 번호 배열\r\n  const [pageNumbers, setPageNumbers] = useState([]);\r\n  // 최대 보여지는 페이지 번호 범위\r\n  const [maxPageLimit, setMaxPageLimit] = useState(10);\r\n  const [minPageLimit, setMinpageLimit] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // boardNum을 10으로 나눈다음 Math.ceil 내장객체를 이용하여 정수로 만든다.\r\n    const pages = Math.ceil(totalItems / itemPerPage);\r\n    setTotalPages(pages);\r\n    // 만든 정수를 1부터 시작하여 배열로 만든다. 배열의 개수는 무한대로 설정할 수 있다.\r\n    const numbers = Array.from({ length: pages }, (_, i) => i + 1);\r\n    setPageNumbers(numbers);\r\n    // console.log(numbers);\r\n\r\n    // url에서 page 쿼리 파라미터를 읽어서 10진수 숫자로 변환한 후\r\n    // 유효한 값이 아니면 1로 설정\r\n    const pageFromQuery = parseInt(\r\n      new URLSearchParams(window.location.search).get(\"page\"),\r\n      10,\r\n    );\r\n    if (!pageFromQuery || isNaN(pageFromQuery)) {\r\n      setCurrentPage(1);\r\n    } else {\r\n      setCurrentPage(pageFromQuery);\r\n    }\r\n  }, [totalItems, itemPerPage, currentPage, page]);\r\n\r\n  // 현재 페이지네여션을 렌더링할 페이지 번호들\r\n  const renderPageNumbers = pageNumbers.slice(minPageLimit, maxPageLimit);\r\n\r\n  // 이전 버튼\r\n  const moveToPrev = () => {\r\n    setCurrentPage(currentPage - 1);\r\n    if (currentPage > 10 && (currentPage - 1) % 10 === 0) {\r\n      setMaxPageLimit(maxPageLimit - 10);\r\n      setMinpageLimit(minPageLimit - 10);\r\n    }\r\n    moveToList({ page: currentPage - 1 });\r\n  };\r\n  // 다음 버튼\r\n  const moveToNext = () => {\r\n    setCurrentPage(currentPage + 1);\r\n    if (currentPage >= 10 && currentPage % 10 === 0) {\r\n      setMaxPageLimit(maxPageLimit + 10);\r\n      setMinpageLimit(minPageLimit + 10);\r\n    }\r\n    moveToList({ page: currentPage + 1 });\r\n  };\r\n\r\n  return (\r\n    <PagingBoxStyle>\r\n      {currentPage > 1 && (\r\n        <PagingNumStyle onClick={moveToPrev}>이전</PagingNumStyle>\r\n      )}\r\n\r\n      {renderPageNumbers.map(number => (\r\n        <PagingNumStyle\r\n          key={number}\r\n          onClick={() => {\r\n            setCurrentPage(number);\r\n            moveToList({ page: number });\r\n          }}\r\n          style={\r\n            currentPage === number\r\n              ? { color: ColorStyle.g900, fontWeight: \"bold\" }\r\n              : {}\r\n          }\r\n        >\r\n          {number}\r\n        </PagingNumStyle>\r\n      ))}\r\n\r\n      {currentPage < totalPages && (\r\n        <PagingNumStyle onClick={moveToNext}>다음</PagingNumStyle>\r\n      )}\r\n    </PagingBoxStyle>\r\n  );\r\n};\r\n\r\nexport default Paging;\r\n","import styled from \"@emotion/styled\";\r\nimport { ColorStyle, FontSize } from \"../../../styles/common/CommonStyle\";\r\n\r\nexport const TagStyle = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3px 5px;\r\n  background: #fff;\r\n  border: 1px solid ${ColorStyle.secondary};\r\n  border-radius: 10px;\r\n  span {\r\n    color: ${ColorStyle.primary};\r\n    font-size: ${FontSize.tag};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { TagStyle } from \"./styles/TagStyle\";\r\n\r\nconst Tag = props => {\r\n  const { tagtext } = props;\r\n\r\n  return (\r\n    <TagStyle>\r\n      <span>{tagtext}</span>\r\n    </TagStyle>\r\n  );\r\n};\r\n\r\nexport default Tag;\r\n","import React from \"react\";\r\nimport {\r\n  InfoStyle,\r\n  TableStyle,\r\n  TitleStyle,\r\n  TnoStyle,\r\n} from \"./styles/ListStyle\";\r\nimport { ColorStyle } from \"../../styles/common/CommonStyle\";\r\n\r\nconst Thead = () => {\r\n  return (\r\n    <TableStyle\r\n      marginTop=\"30px\"\r\n      background={ColorStyle.g200}\r\n      borderTop=\"1px solid #8F8F8F\"\r\n    >\r\n      <TnoStyle>번호</TnoStyle>\r\n      <TitleStyle justifyContent=\"center\">제목</TitleStyle>\r\n      <InfoStyle>\r\n        <div>작성자</div>\r\n        <div>작성일</div>\r\n        {/* <div>조회수</div> */}\r\n      </InfoStyle>\r\n    </TableStyle>\r\n  );\r\n};\r\n\r\nexport default Thead;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getList } from \"../../api/communityApi\";\r\nimport { API_SERVER_HOST } from \"../../api/config\";\r\nimport useCustomMove from \"../../hooks/useCustomMove\";\r\nimport { ColorStyle } from \"../../styles/common/CommonStyle\";\r\nimport Button from \"../button/Button\";\r\nimport Fetching from \"../common/Fetching\";\r\nimport Paging from \"../common/Paging\";\r\nimport Tag from \"../tag/Tag\";\r\nimport Thead from \"./Thead\";\r\nimport {\r\n  BtnStyle,\r\n  ContentInfoStyle,\r\n  ContentStyle,\r\n  ImgStyle,\r\n  InfoStyle,\r\n  NameStyle,\r\n  SearchStyle,\r\n  SummaryStyle,\r\n  TableFootStyle,\r\n  TagBoxStyle,\r\n  ThumbnailStyle,\r\n  TitleStyle,\r\n  TnoStyle,\r\n  TopenStyle,\r\n  TtableStyle,\r\n  UserStyle,\r\n  WrapStyle,\r\n} from \"./styles/ListStyle\";\r\n\r\nconst host = API_SERVER_HOST;\r\n\r\n// 서버데이터 초기값 배열\r\nconst initState = [\r\n  {\r\n    iboard: 0,\r\n    boardNum: 0,\r\n    iuser: 0,\r\n    writerName: \"\",\r\n    writerPic: \"\",\r\n    title: \"\",\r\n    contents: \"\",\r\n    createdAt: \"\",\r\n    pics: [],\r\n    count: 0,\r\n  },\r\n];\r\n\r\nconst List = () => {\r\n  // 커스텀 훅\r\n  const { page, search, moveToRead, moveToAdd, moveToSearch } = useCustomMove();\r\n  // 서버 데이터 내용 상태 변경\r\n  const [serverData, setServerData] = useState(initState);\r\n  // 해당 글로 상태 변경\r\n  const [topenIboard, setTopenIboard] = useState({});\r\n  // 해당 글 미리보기 내용 상태 변경\r\n  const [preview, setPreview] = useState({\r\n    iboard: 0,\r\n    boardNum: 0,\r\n    iuser: 0,\r\n    writerName: \"\",\r\n    writerPic: \"\",\r\n    title: \"\",\r\n    contents: \"\",\r\n    createdAt: \"\",\r\n    pics: [],\r\n    count: 0,\r\n  });\r\n  // 로딩창\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  // page에 따라 최초 데이터 가져오기\r\n  useEffect(() => {\r\n    const param = { page, search };\r\n    getList({ param, successFn, failFn, errorFn });\r\n  }, [page, search]);\r\n\r\n  // 데이터 연동 처리 결과\r\n  const successFn = result => {\r\n    setServerData(result);\r\n    setFetching(false);\r\n    // console.log(result);\r\n  };\r\n  const failFn = result => {\r\n    setFetching(false);\r\n    console.log(result);\r\n  };\r\n  const errorFn = result => {\r\n    setFetching(false);\r\n    console.log(result);\r\n  };\r\n\r\n  // 해당 글 클릭 시 미리보기 함수정의\r\n  const handleClickTopen = item => {\r\n    if (topenIboard === item.iboard) {\r\n      // 이미 선택된 항목을 다시 클릭하면 미리보기를 닫습니다.\r\n      setTopenIboard(null);\r\n    } else {\r\n      // 다른 항목을 클릭하면 그 항목의 미리보기를 엽니다.\r\n      setTopenIboard(item.iboard);\r\n      if (preview.iboard != item.iboard) {\r\n        setPreview(item);\r\n        // setPreview({\r\n        //   iboard: item.iboard,\r\n        //   boardNum: item.boardNum,\r\n        //   iuser: item.iuser,\r\n        //   writerName: item.writerName,\r\n        //   writerPic: item.writerPic,\r\n        //   title: item.title,\r\n        //   createdAt: item.createdAt,\r\n        //   contents: item.contents,\r\n        //   pics: item.pics,\r\n        //   count: item.count,\r\n        // });\r\n      }\r\n    }\r\n  };\r\n\r\n  // 검색어 상태 업데이트\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const handleSearchChange = e => {\r\n    // 검색어 변경 시 상태 업데이트\r\n    setSearchInput(e.target.value);\r\n  };\r\n  const handleSearchSubmit = e => {\r\n    // 폼 제출 기본 동작 방지\r\n    e.preventDefault();\r\n    moveToSearch({ page: 1, search: searchInput });\r\n  };\r\n\r\n  return (\r\n    <WrapStyle>\r\n      {fetching ? <Fetching /> : null}\r\n      <Thead />\r\n      {/* 게시글 목록 보기 */}\r\n      {serverData.map(item => (\r\n        <div key={item.iboard}>\r\n          <TtableStyle\r\n            selected={topenIboard === item.iboard}\r\n            onClick={() => {\r\n              handleClickTopen(item);\r\n            }}\r\n          >\r\n            <TnoStyle color={ColorStyle.g700}>{item.boardNum}</TnoStyle>\r\n            <TitleStyle>{item.title}</TitleStyle>\r\n            <InfoStyle color={ColorStyle.g700}>\r\n              <div>{item.writerName}</div>\r\n              <div>{item.createdAt}</div>\r\n              {/* <div>조회수</div> */}\r\n            </InfoStyle>\r\n          </TtableStyle>\r\n\r\n          {/* 해당 글 미리보기 */}\r\n          {topenIboard === item.iboard && (\r\n            <TopenStyle>\r\n              <ImgStyle>\r\n                {/* <LargeImgStyle>\r\n                  {preview.pics[0] && (\r\n                    <img\r\n                      src={`${host}/pic/community/${preview.iboard}/${preview.pics[0]}`}\r\n                      alt=\"img_1\"\r\n                    />\r\n                  )}\r\n                </LargeImgStyle> */}\r\n                <ThumbnailStyle>\r\n                  {preview.pics.map(\r\n                    (pic, index) =>\r\n                      pic && (\r\n                        <div className=\"thumbnail\" key={index}>\r\n                          <img\r\n                            src={`${host}/pic/community/${preview.iboard}/${pic}`}\r\n                            alt={`img_${index + 1}`}\r\n                          />\r\n                        </div>\r\n                      ),\r\n                  )}\r\n                </ThumbnailStyle>\r\n              </ImgStyle>\r\n              <ContentInfoStyle>\r\n                <ContentStyle>\r\n                  <UserStyle>\r\n                    <img src={preview.writerPic} alt=\"프로필사진\" />\r\n                    <NameStyle>\r\n                      <div>{preview.writerName}</div>\r\n                      {/* 더미 태그 */}\r\n                      <TagBoxStyle>\r\n                        <Tag tagtext=\"#동성로\" />\r\n                        <Tag tagtext=\"#모듬한판\" />\r\n                        <Tag tagtext=\"#퇴근길\" />\r\n                      </TagBoxStyle>\r\n                    </NameStyle>\r\n                  </UserStyle>\r\n                  <SummaryStyle>{preview.contents}</SummaryStyle>\r\n                </ContentStyle>\r\n              </ContentInfoStyle>\r\n              <BtnStyle>\r\n                <div\r\n                  onClick={() => {\r\n                    moveToRead(preview.iboard);\r\n                  }}\r\n                >\r\n                  <Button bttext=\"글 더보기\" />\r\n                </div>\r\n              </BtnStyle>\r\n            </TopenStyle>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {/* 페이지네이션 */}\r\n      <Paging totalItems={serverData[0].count} itemPerPage={10} />\r\n      <SearchStyle>\r\n        {/* <select className=\"select\">\r\n          <option value={0}>전체</option>\r\n          <option value={1}>제목</option>\r\n          <option value={2}>내용</option>\r\n        </select> */}\r\n        <div className=\"searchBox\">\r\n          <form onSubmit={handleSearchSubmit}>\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"글 제목을 검색해보세요\"\r\n                value={searchInput}\r\n                onChange={handleSearchChange}\r\n              />\r\n              <button\r\n                className=\"icon\"\r\n                style={{ border: \"none\", background: \"none\" }}\r\n              >\r\n                <img src=\"/assets/images/search.svg\" alt=\"search\" />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </SearchStyle>\r\n      <TableFootStyle>\r\n        <div onClick={moveToAdd}>\r\n          <Button bttext=\"글쓰기\" />\r\n        </div>\r\n      </TableFootStyle>\r\n    </WrapStyle>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport List from \"../../components/community/List\";\r\n\r\n// 글 목록 페이지입니다.\r\nconst ListPage = () => {\r\n  return (\r\n    <div>\r\n      <List />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListPage;\r\n"],"names":["_ref","totalItems","itemPerPage","moveToList","page","useCustomMove","totalPages","setTotalPages","useState","currentPage","setCurrentPage","pageNumbers","setPageNumbers","maxPageLimit","setMaxPageLimit","minPageLimit","setMinpageLimit","useEffect","pages","Math","ceil","numbers","Array","from","length","_","i","pageFromQuery","parseInt","URLSearchParams","window","location","search","get","isNaN","renderPageNumbers","slice","_jsxs","PagingBoxStyle","children","_jsx","PagingNumStyle","onClick","moveToPrev","map","number","style","color","ColorStyle","g900","fontWeight","moveToNext","TagStyle","styled","div","_templateObject","_taggedTemplateLiteral","secondary","primary","FontSize","tag","props","tagtext","Thead","TableStyle","marginTop","background","g200","borderTop","TnoStyle","TitleStyle","justifyContent","InfoStyle","host","API_SERVER_HOST","initState","iboard","boardNum","iuser","writerName","writerPic","title","contents","createdAt","pics","count","List","moveToRead","moveToAdd","moveToSearch","serverData","setServerData","topenIboard","setTopenIboard","preview","setPreview","fetching","setFetching","param","getList","successFn","failFn","errorFn","result","console","log","searchInput","setSearchInput","WrapStyle","Fetching","item","TtableStyle","selected","handleClickTopen","g700","TopenStyle","ImgStyle","ThumbnailStyle","pic","index","className","src","concat","alt","ContentInfoStyle","ContentStyle","UserStyle","NameStyle","TagBoxStyle","Tag","SummaryStyle","BtnStyle","Button","bttext","Paging","SearchStyle","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","border","TableFootStyle","ListPage"],"sourceRoot":""}